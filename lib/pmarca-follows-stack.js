"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PmarcaFollowsStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const dynamodb = require("@aws-cdk/aws-dynamodb");
// import * as apigw from '@aws-cdk/aws-apigateway';
const events = require("@aws-cdk/aws-events");
const targets = require("@aws-cdk/aws-events-targets");
const assets = require("@aws-cdk/aws-s3-assets");
const path = require("path");
require('dotenv').config();
class PmarcaFollowsStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const lambdaAsset = new assets.Asset(this, 'lambda.zip', {
            path: path.join(__dirname, '..', 'lambda'),
        });
        const followsTable = new dynamodb.Table(this, 'Follows', {
            partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },
            stream: dynamodb.StreamViewType.NEW_IMAGE,
        });
        const fetchFollows = new lambda.Function(this, 'FetchFollows', {
            runtime: lambda.Runtime.NODEJS_12_X,
            code: lambda.Code.fromBucket(lambdaAsset.bucket, lambdaAsset.s3ObjectKey),
            handler: 'fetch-follows.handler',
            environment: {
                FOLLOWS_TABLE_NAME: followsTable.tableName,
                TWITTER_CONSUMER_KEY: process.env.TWITTER_CONSUMER_KEY,
                TWITTER_CONSUMER_SECRET: process.env.TWITTER_CONSUMER_SECRET,
                TWITTER_ACCESS_TOKEN: process.env.TWITTER_ACCESS_TOKEN,
                TWITTER_ACCESS_TOKEN_SECRET: process.env.TWITTER_ACCESS_TOKEN_SECRET,
            },
        });
        followsTable.grantReadWriteData(fetchFollows);
        // for debugging
        // new apigw.LambdaRestApi(this, 'Endpoint', {
        //     handler: fetchFollows,
        // });
        const rule = new events.Rule(this, 'ScheduleRule', {
            schedule: events.Schedule.expression('rate(15 minutes)'),
        });
        rule.addTarget(new targets.LambdaFunction(fetchFollows));
        const newFollow = new lambda.Function(this, 'NewFollow', {
            runtime: lambda.Runtime.NODEJS_12_X,
            code: lambda.Code.fromAsset('lambda'),
            handler: 'new-follow.handler',
            environment: {
                TWITTER_CONSUMER_KEY: process.env.TWITTER_CONSUMER_KEY,
                TWITTER_CONSUMER_SECRET: process.env.TWITTER_CONSUMER_SECRET,
                TWITTER_ACCESS_TOKEN: process.env.TWITTER_ACCESS_TOKEN,
                TWITTER_ACCESS_TOKEN_SECRET: process.env.TWITTER_ACCESS_TOKEN_SECRET,
            },
        });
        followsTable.grantStreamRead(newFollow);
        newFollow.addEventSourceMapping('EventSourceMapping', {
            eventSourceArn: followsTable.tableStreamArn,
            enabled: true,
            startingPosition: lambda.StartingPosition.LATEST,
            batchSize: 1,
        });
    }
}
exports.PmarcaFollowsStack = PmarcaFollowsStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG1hcmNhLWZvbGxvd3Mtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwbWFyY2EtZm9sbG93cy1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLGtEQUFrRDtBQUNsRCxvREFBb0Q7QUFDcEQsOENBQThDO0FBQzlDLHVEQUF1RDtBQUN2RCxpREFBaUQ7QUFDakQsNkJBQTZCO0FBRTdCLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUUzQixNQUFhLGtCQUFtQixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQzdDLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDaEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDckQsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7U0FDN0MsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDckQsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDakUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUztTQUM1QyxDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMzRCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUM7WUFDekUsT0FBTyxFQUFFLHVCQUF1QjtZQUNoQyxXQUFXLEVBQUU7Z0JBQ1Qsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLFNBQVM7Z0JBQzFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQThCO2dCQUNoRSx1QkFBdUIsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUFpQztnQkFDdEUsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBOEI7Z0JBQ2hFLDJCQUEyQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQXFDO2FBQ2pGO1NBQ0osQ0FBQyxDQUFDO1FBRUgsWUFBWSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTlDLGdCQUFnQjtRQUNoQiw4Q0FBOEM7UUFDOUMsNkJBQTZCO1FBQzdCLE1BQU07UUFFTixNQUFNLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMvQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUM7U0FDM0QsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUV6RCxNQUFNLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUNyRCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7WUFDckMsT0FBTyxFQUFFLG9CQUFvQjtZQUM3QixXQUFXLEVBQUU7Z0JBQ1Qsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBOEI7Z0JBQ2hFLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQWlDO2dCQUN0RSxvQkFBb0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUE4QjtnQkFDaEUsMkJBQTJCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBcUM7YUFDakY7U0FDSixDQUFDLENBQUM7UUFFSCxZQUFZLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXhDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxvQkFBb0IsRUFBRTtZQUNsRCxjQUFjLEVBQUUsWUFBWSxDQUFDLGNBQXdCO1lBQ3JELE9BQU8sRUFBRSxJQUFJO1lBQ2IsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU07WUFDaEQsU0FBUyxFQUFFLENBQUM7U0FDZixDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUE1REQsZ0RBNERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgZHluYW1vZGIgZnJvbSAnQGF3cy1jZGsvYXdzLWR5bmFtb2RiJztcbi8vIGltcG9ydCAqIGFzIGFwaWd3IGZyb20gJ0Bhd3MtY2RrL2F3cy1hcGlnYXRld2F5JztcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tICdAYXdzLWNkay9hd3MtZXZlbnRzJztcbmltcG9ydCAqIGFzIHRhcmdldHMgZnJvbSAnQGF3cy1jZGsvYXdzLWV2ZW50cy10YXJnZXRzJztcbmltcG9ydCAqIGFzIGFzc2V0cyBmcm9tICdAYXdzLWNkay9hd3MtczMtYXNzZXRzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xuXG5leHBvcnQgY2xhc3MgUG1hcmNhRm9sbG93c1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgICAgICBjb25zdCBsYW1iZGFBc3NldCA9IG5ldyBhc3NldHMuQXNzZXQodGhpcywgJ2xhbWJkYS56aXAnLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnbGFtYmRhJyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGZvbGxvd3NUYWJsZSA9IG5ldyBkeW5hbW9kYi5UYWJsZSh0aGlzLCAnRm9sbG93cycsIHtcbiAgICAgICAgICAgIHBhcnRpdGlvbktleTogeyBuYW1lOiAnaWQnLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgICAgICAgc3RyZWFtOiBkeW5hbW9kYi5TdHJlYW1WaWV3VHlwZS5ORVdfSU1BR0UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGZldGNoRm9sbG93cyA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ0ZldGNoRm9sbG93cycsIHtcbiAgICAgICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xMl9YLFxuICAgICAgICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUJ1Y2tldChsYW1iZGFBc3NldC5idWNrZXQsIGxhbWJkYUFzc2V0LnMzT2JqZWN0S2V5KSxcbiAgICAgICAgICAgIGhhbmRsZXI6ICdmZXRjaC1mb2xsb3dzLmhhbmRsZXInLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgICAgICBGT0xMT1dTX1RBQkxFX05BTUU6IGZvbGxvd3NUYWJsZS50YWJsZU5hbWUsXG4gICAgICAgICAgICAgICAgVFdJVFRFUl9DT05TVU1FUl9LRVk6IHByb2Nlc3MuZW52LlRXSVRURVJfQ09OU1VNRVJfS0VZIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICBUV0lUVEVSX0NPTlNVTUVSX1NFQ1JFVDogcHJvY2Vzcy5lbnYuVFdJVFRFUl9DT05TVU1FUl9TRUNSRVQgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgIFRXSVRURVJfQUNDRVNTX1RPS0VOOiBwcm9jZXNzLmVudi5UV0lUVEVSX0FDQ0VTU19UT0tFTiBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgVFdJVFRFUl9BQ0NFU1NfVE9LRU5fU0VDUkVUOiBwcm9jZXNzLmVudi5UV0lUVEVSX0FDQ0VTU19UT0tFTl9TRUNSRVQgYXMgc3RyaW5nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9sbG93c1RhYmxlLmdyYW50UmVhZFdyaXRlRGF0YShmZXRjaEZvbGxvd3MpO1xuXG4gICAgICAgIC8vIGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgLy8gbmV3IGFwaWd3LkxhbWJkYVJlc3RBcGkodGhpcywgJ0VuZHBvaW50Jywge1xuICAgICAgICAvLyAgICAgaGFuZGxlcjogZmV0Y2hGb2xsb3dzLFxuICAgICAgICAvLyB9KTtcblxuICAgICAgICBjb25zdCBydWxlID0gbmV3IGV2ZW50cy5SdWxlKHRoaXMsICdTY2hlZHVsZVJ1bGUnLCB7XG4gICAgICAgICAgICBzY2hlZHVsZTogZXZlbnRzLlNjaGVkdWxlLmV4cHJlc3Npb24oJ3JhdGUoMTUgbWludXRlcyknKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcnVsZS5hZGRUYXJnZXQobmV3IHRhcmdldHMuTGFtYmRhRnVuY3Rpb24oZmV0Y2hGb2xsb3dzKSk7XG5cbiAgICAgICAgY29uc3QgbmV3Rm9sbG93ID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnTmV3Rm9sbG93Jywge1xuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzEyX1gsXG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoJ2xhbWJkYScpLFxuICAgICAgICAgICAgaGFuZGxlcjogJ25ldy1mb2xsb3cuaGFuZGxlcicsXG4gICAgICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgICAgICAgIFRXSVRURVJfQ09OU1VNRVJfS0VZOiBwcm9jZXNzLmVudi5UV0lUVEVSX0NPTlNVTUVSX0tFWSBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgVFdJVFRFUl9DT05TVU1FUl9TRUNSRVQ6IHByb2Nlc3MuZW52LlRXSVRURVJfQ09OU1VNRVJfU0VDUkVUIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICBUV0lUVEVSX0FDQ0VTU19UT0tFTjogcHJvY2Vzcy5lbnYuVFdJVFRFUl9BQ0NFU1NfVE9LRU4gYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgIFRXSVRURVJfQUNDRVNTX1RPS0VOX1NFQ1JFVDogcHJvY2Vzcy5lbnYuVFdJVFRFUl9BQ0NFU1NfVE9LRU5fU0VDUkVUIGFzIHN0cmluZyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvbGxvd3NUYWJsZS5ncmFudFN0cmVhbVJlYWQobmV3Rm9sbG93KTtcblxuICAgICAgICBuZXdGb2xsb3cuYWRkRXZlbnRTb3VyY2VNYXBwaW5nKCdFdmVudFNvdXJjZU1hcHBpbmcnLCB7XG4gICAgICAgICAgICBldmVudFNvdXJjZUFybjogZm9sbG93c1RhYmxlLnRhYmxlU3RyZWFtQXJuIGFzIHN0cmluZyxcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBzdGFydGluZ1Bvc2l0aW9uOiBsYW1iZGEuU3RhcnRpbmdQb3NpdGlvbi5MQVRFU1QsXG4gICAgICAgICAgICBiYXRjaFNpemU6IDEsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==