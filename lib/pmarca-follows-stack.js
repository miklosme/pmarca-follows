"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PmarcaFollowsStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const dynamodb = require("@aws-cdk/aws-dynamodb");
const apigw = require("@aws-cdk/aws-apigateway");
const assets = require("@aws-cdk/aws-s3-assets");
const path = require("path");
require('dotenv').config();
class PmarcaFollowsStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const lambdaAsset = new assets.Asset(this, 'lambda.zip', {
            path: path.join(__dirname, '..', 'lambda'),
        });
        const followsTable = new dynamodb.Table(this, 'Follows', {
            partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },
            stream: dynamodb.StreamViewType.NEW_IMAGE,
        });
        const fetchFollows = new lambda.Function(this, 'FetchFollows', {
            runtime: lambda.Runtime.NODEJS_12_X,
            code: lambda.Code.fromBucket(lambdaAsset.bucket, lambdaAsset.s3ObjectKey),
            handler: 'fetch-follows.handler',
            timeout: cdk.Duration.seconds(10),
            retryAttempts: 0,
            environment: {
                FOLLOWS_TABLE_NAME: followsTable.tableName,
                TWITTER_CONSUMER_KEY: process.env.TWITTER_CONSUMER_KEY,
                TWITTER_CONSUMER_SECRET: process.env.TWITTER_CONSUMER_SECRET,
                TWITTER_ACCESS_TOKEN: process.env.TWITTER_ACCESS_TOKEN,
                TWITTER_ACCESS_TOKEN_SECRET: process.env.TWITTER_ACCESS_TOKEN_SECRET,
            },
        });
        followsTable.grantReadWriteData(fetchFollows);
        new apigw.LambdaRestApi(this, 'Endpoint', {
            handler: fetchFollows,
        });
        const newFollow = new lambda.Function(this, 'NewFollow', {
            runtime: lambda.Runtime.NODEJS_12_X,
            code: lambda.Code.fromAsset('lambda'),
            handler: 'new-follow.handler',
            timeout: cdk.Duration.seconds(10),
            retryAttempts: 0,
            environment: {
                TWITTER_CONSUMER_KEY: process.env.TWITTER_CONSUMER_KEY,
                TWITTER_CONSUMER_SECRET: process.env.TWITTER_CONSUMER_SECRET,
                TWITTER_ACCESS_TOKEN: process.env.TWITTER_ACCESS_TOKEN,
                TWITTER_ACCESS_TOKEN_SECRET: process.env.TWITTER_ACCESS_TOKEN_SECRET,
            },
        });
        followsTable.grantStreamRead(newFollow);
        newFollow.addEventSourceMapping('EventSourceMapping', {
            eventSourceArn: followsTable.tableStreamArn,
            enabled: true,
            startingPosition: lambda.StartingPosition.LATEST,
            batchSize: 1,
        });
    }
}
exports.PmarcaFollowsStack = PmarcaFollowsStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG1hcmNhLWZvbGxvd3Mtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwbWFyY2EtZm9sbG93cy1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLGtEQUFrRDtBQUNsRCxpREFBaUQ7QUFDakQsaURBQWlEO0FBQ2pELDZCQUE2QjtBQUU3QixPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFM0IsTUFBYSxrQkFBbUIsU0FBUSxHQUFHLENBQUMsS0FBSztJQUM3QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQ2hFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQ3JELElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDO1NBQzdDLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO1lBQ3JELFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO1lBQ2pFLE1BQU0sRUFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVM7U0FDNUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDM0QsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztZQUNuQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDO1lBQ3pFLE9BQU8sRUFBRSx1QkFBdUI7WUFDaEMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNqQyxhQUFhLEVBQUUsQ0FBQztZQUNoQixXQUFXLEVBQUU7Z0JBQ1Qsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLFNBQVM7Z0JBQzFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQThCO2dCQUNoRSx1QkFBdUIsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUFpQztnQkFDdEUsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBOEI7Z0JBQ2hFLDJCQUEyQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQXFDO2FBQ2pGO1NBQ0osQ0FBQyxDQUFDO1FBRUgsWUFBWSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTlDLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3RDLE9BQU8sRUFBRSxZQUFZO1NBQ3hCLENBQUMsQ0FBQztRQUVILE1BQU0sU0FBUyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO1lBQ3JELE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUNyQyxPQUFPLEVBQUUsb0JBQW9CO1lBQzdCLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDakMsYUFBYSxFQUFFLENBQUM7WUFDaEIsV0FBVyxFQUFFO2dCQUNULG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQThCO2dCQUNoRSx1QkFBdUIsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUFpQztnQkFDdEUsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBOEI7Z0JBQ2hFLDJCQUEyQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQXFDO2FBQ2pGO1NBQ0osQ0FBQyxDQUFDO1FBRUgsWUFBWSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV4QyxTQUFTLENBQUMscUJBQXFCLENBQUMsb0JBQW9CLEVBQUU7WUFDbEQsY0FBYyxFQUFFLFlBQVksQ0FBQyxjQUF3QjtZQUNyRCxPQUFPLEVBQUUsSUFBSTtZQUNiLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNO1lBQ2hELFNBQVMsRUFBRSxDQUFDO1NBQ2YsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBekRELGdEQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIGR5bmFtb2RiIGZyb20gJ0Bhd3MtY2RrL2F3cy1keW5hbW9kYic7XG5pbXBvcnQgKiBhcyBhcGlndyBmcm9tICdAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheSc7XG5pbXBvcnQgKiBhcyBhc3NldHMgZnJvbSAnQGF3cy1jZGsvYXdzLXMzLWFzc2V0cyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5yZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcblxuZXhwb3J0IGNsYXNzIFBtYXJjYUZvbGxvd3NTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgbGFtYmRhQXNzZXQgPSBuZXcgYXNzZXRzLkFzc2V0KHRoaXMsICdsYW1iZGEuemlwJywge1xuICAgICAgICAgICAgcGF0aDogcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ2xhbWJkYScpLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBmb2xsb3dzVGFibGUgPSBuZXcgZHluYW1vZGIuVGFibGUodGhpcywgJ0ZvbGxvd3MnLCB7XG4gICAgICAgICAgICBwYXJ0aXRpb25LZXk6IHsgbmFtZTogJ2lkJywgdHlwZTogZHluYW1vZGIuQXR0cmlidXRlVHlwZS5TVFJJTkcgfSxcbiAgICAgICAgICAgIHN0cmVhbTogZHluYW1vZGIuU3RyZWFtVmlld1R5cGUuTkVXX0lNQUdFLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBmZXRjaEZvbGxvd3MgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdGZXRjaEZvbGxvd3MnLCB7XG4gICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTJfWCxcbiAgICAgICAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21CdWNrZXQobGFtYmRhQXNzZXQuYnVja2V0LCBsYW1iZGFBc3NldC5zM09iamVjdEtleSksXG4gICAgICAgICAgICBoYW5kbGVyOiAnZmV0Y2gtZm9sbG93cy5oYW5kbGVyJyxcbiAgICAgICAgICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDEwKSxcbiAgICAgICAgICAgIHJldHJ5QXR0ZW1wdHM6IDAsXG4gICAgICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgICAgICAgIEZPTExPV1NfVEFCTEVfTkFNRTogZm9sbG93c1RhYmxlLnRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgICBUV0lUVEVSX0NPTlNVTUVSX0tFWTogcHJvY2Vzcy5lbnYuVFdJVFRFUl9DT05TVU1FUl9LRVkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgIFRXSVRURVJfQ09OU1VNRVJfU0VDUkVUOiBwcm9jZXNzLmVudi5UV0lUVEVSX0NPTlNVTUVSX1NFQ1JFVCBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgVFdJVFRFUl9BQ0NFU1NfVE9LRU46IHByb2Nlc3MuZW52LlRXSVRURVJfQUNDRVNTX1RPS0VOIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICBUV0lUVEVSX0FDQ0VTU19UT0tFTl9TRUNSRVQ6IHByb2Nlc3MuZW52LlRXSVRURVJfQUNDRVNTX1RPS0VOX1NFQ1JFVCBhcyBzdHJpbmcsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBmb2xsb3dzVGFibGUuZ3JhbnRSZWFkV3JpdGVEYXRhKGZldGNoRm9sbG93cyk7XG5cbiAgICAgICAgbmV3IGFwaWd3LkxhbWJkYVJlc3RBcGkodGhpcywgJ0VuZHBvaW50Jywge1xuICAgICAgICAgICAgaGFuZGxlcjogZmV0Y2hGb2xsb3dzLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBuZXdGb2xsb3cgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdOZXdGb2xsb3cnLCB7XG4gICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTJfWCxcbiAgICAgICAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldCgnbGFtYmRhJyksXG4gICAgICAgICAgICBoYW5kbGVyOiAnbmV3LWZvbGxvdy5oYW5kbGVyJyxcbiAgICAgICAgICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDEwKSxcbiAgICAgICAgICAgIHJldHJ5QXR0ZW1wdHM6IDAsXG4gICAgICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgICAgICAgIFRXSVRURVJfQ09OU1VNRVJfS0VZOiBwcm9jZXNzLmVudi5UV0lUVEVSX0NPTlNVTUVSX0tFWSBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgVFdJVFRFUl9DT05TVU1FUl9TRUNSRVQ6IHByb2Nlc3MuZW52LlRXSVRURVJfQ09OU1VNRVJfU0VDUkVUIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICBUV0lUVEVSX0FDQ0VTU19UT0tFTjogcHJvY2Vzcy5lbnYuVFdJVFRFUl9BQ0NFU1NfVE9LRU4gYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgIFRXSVRURVJfQUNDRVNTX1RPS0VOX1NFQ1JFVDogcHJvY2Vzcy5lbnYuVFdJVFRFUl9BQ0NFU1NfVE9LRU5fU0VDUkVUIGFzIHN0cmluZyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvbGxvd3NUYWJsZS5ncmFudFN0cmVhbVJlYWQobmV3Rm9sbG93KTtcblxuICAgICAgICBuZXdGb2xsb3cuYWRkRXZlbnRTb3VyY2VNYXBwaW5nKCdFdmVudFNvdXJjZU1hcHBpbmcnLCB7XG4gICAgICAgICAgICBldmVudFNvdXJjZUFybjogZm9sbG93c1RhYmxlLnRhYmxlU3RyZWFtQXJuIGFzIHN0cmluZyxcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBzdGFydGluZ1Bvc2l0aW9uOiBsYW1iZGEuU3RhcnRpbmdQb3NpdGlvbi5MQVRFU1QsXG4gICAgICAgICAgICBiYXRjaFNpemU6IDEsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==